use core::{u16, usize};

use agb::{
    display::object::{OamManaged, Object, Tag},
    input::{Button, ButtonController, Tri},
    interrupt::VBlank,
    Gba,
};

use crate::tiles::{CHAR_BACK, CHAR_FRONT, CHAR_LEFT, CHAR_RIGHT, HOUSE_1};

trait Entity<'a> {
    fn new(tag: &'static Tag, gfx: &'a OamManaged, coords: (u16, u16)) -> Self;
    fn tick(&mut self, input: &ButtonController, gfx: &'a OamManaged);
}

struct Char<'a> {
    sprite: Object<'a>,
    current: &'static Tag,
    current_idx: usize,
}

impl<'a> Entity<'a> for Char<'a> {
    fn new(tag: &'static Tag, gfx: &'a OamManaged, (x, y): (u16, u16)) -> Self {
        let sprite = tag.animation_sprite(0);

        let mut sprite = gfx.object_sprite(sprite);
        sprite.set_x(x).set_y(y).show();

        Self {
            sprite,
            current: tag,
            current_idx: 0,
        }
    }

    fn tick(&mut self, input: &ButtonController, gfx: &'a OamManaged) {
        let mut animate = false;

        if input.is_pressed(Button::DOWN) {
            self.current = CHAR_FRONT;
            animate = true
        }

        if input.is_pressed(Button::UP) {
            self.current = CHAR_BACK;
            animate = true
        }

        if input.is_pressed(Button::RIGHT) {
            self.current = CHAR_RIGHT;
            animate = true
        }

        if input.is_pressed(Button::LEFT) {
            self.current = CHAR_LEFT;
            animate = true
        }

        if animate {
            self.current_idx = if self.current_idx > self.current.sprites().len() {
                0
            } else {
                self.current_idx + 1
            };

            self.sprite
                .set_sprite(gfx.sprite(self.current.animation_sprite(self.current_idx)));
        }
    }
}

struct StaticObj<'a> {
    sprite: Object<'a>,
    current: &'static Tag,
    current_idx: usize,
    coords: (u16, u16),
}

impl<'a> Entity<'a> for StaticObj<'a> {
    fn new(tag: &'static Tag, gfx: &'a OamManaged, (x, y): (u16, u16)) -> Self {
        let sprite = tag.animation_sprite(0);

        let mut sprite = gfx.object_sprite(sprite);
        sprite.set_x(x).set_y(y).show();

        Self {
            sprite,
            current: tag,
            current_idx: 0,
            coords: (x, y),
        }
    }

    fn tick(&mut self, input: &ButtonController, gfx: &'a OamManaged) {
        match input.x_tri() {
            Tri::Negative => self.coords.0 -= 1,
            Tri::Positive => self.coords.0 += 1,
            Tri::Zero => {}
        }

        self.current_idx = if self.current_idx > self.current.sprites().len() {
            0
        } else {
            self.current_idx + 1
        };

        self.sprite
            .set_sprite(gfx.sprite(self.current.animation_sprite(self.current_idx)));
        self.sprite.set_x(self.coords.0).set_y(self.coords.1);
    }
}

pub fn run(mut gba: Gba) -> ! {
    let gfx = gba.display.object.get_managed();

    let mut house = StaticObj::new(HOUSE_1, &gfx, (10, 10));

    let mut main_character = Char::new(CHAR_FRONT, &gfx, (104, 64));

    let vblank = VBlank::get();
    let mut input = ButtonController::new();
    let mut count = 0;

    loop {
        vblank.wait_for_vblank();
        input.update();

        count += 1;

        if count % 5 == 0 {
            main_character.tick(&input, &gfx);

            if count % 20 == 0 {
                house.tick(&input, &gfx);
            }
        }

        if count == 100 {
            count = 0
        }

        gfx.commit();
    }
}
